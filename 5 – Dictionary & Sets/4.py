# Python Set Methods from GPT

# ðŸ”¹ 1. add(x) â€“ Add an element
s = {1, 2, 3}
s.add(4)
print(s)  # Output: {1, 2, 3, 4}

# ðŸ”¹ 2. update(iterable) â€“ Add multiple elements
s.update([5, 6])
print(s)  # Output: {1, 2, 3, 4, 5, 6}

# ðŸ”¹ 3. remove(x) â€“ Remove an element (KeyError if not found)
s.remove(2)
print(s)  # Output: {1, 3, 4, 5, 6}

# ðŸ”¹ 4. discard(x) â€“ Remove element if present (no error if not)
s.discard(10)  # Does nothing

# ðŸ”¹ 5. pop() â€“ Remove and return a random element
element = s.pop()
print(element)  # Output: (some element)

# ðŸ”¹ 6. clear() â€“ Remove all elements
s.clear()
print(s)  # Output: set()

# ðŸ”¹ 7. copy() â€“ Shallow copy
s1 = {1, 2, 3}
s2 = s1.copy()
print(s2)  # Output: {1, 2, 3}

# ðŸ”„ Set Operations
# ðŸ”¸ 8. union(set2) or | â€“ Combine elements
a = {1, 2}
b = {2, 3}
print(a.union(b))  # Output: {1, 2, 3}

# ðŸ”¸ 9. intersection(set2) or & â€“ Common elements
print(a.intersection(b))  # Output: {2}

# ðŸ”¸ 10. difference(set2) or - â€“ Items only in a
print(a.difference(b))  # Output: {1}

# ðŸ”¸ 11. symmetric_difference(set2) or ^ â€“ Items in either but not both
print(a.symmetric_difference(b))  # Output: {1, 3}

# ðŸ”¸ 12. issubset(set2) â€“ Check if all elements are in another set
print({1, 2}.issubset({1, 2, 3}))  # Output: True

# ðŸ”¸ 13. issuperset(set2) â€“ Check if it contains all elements of another set
print({1, 2, 3}.issuperset({1, 2}))  # Output: True

# ðŸ”¸ 14. isdisjoint(set2) â€“ Check if sets have no elements in common
print({1, 2}.isdisjoint({3, 4}))  # Output: True